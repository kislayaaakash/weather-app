pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'kislaya-weather-app'
        BACKEND_IMAGE = "${DOCKER_REGISTRY}/backend:latest"
        FRONTEND_IMAGE = "${DOCKER_REGISTRY}/frontend:latest"
    }

    stages {
        stage('Check for Changes') {
            steps {
                script {
                    // Check for changes in the last commit using PowerShell
                    def changes = powershell(script: '''
                        $changes = git diff --name-only HEAD~1
                        return $changes
                    ''', returnStdout: true).trim()

                    // Set environment variables based on changes detected
                    if (changes.contains('backend/')) {
                        env.BUILD_BACKEND = 'true'
                    } else {
                        env.BUILD_BACKEND = 'false'
                    }

                    if (changes.contains('frontend/')) {
                        env.BUILD_FRONTEND = 'true'
                    } else {
                        env.BUILD_FRONTEND = 'false'
                    }

                    if (changes.contains('.env')) {
                        env.UPDATE_ENV = 'true'
                    } else {
                        env.UPDATE_ENV = 'false'
                    }
                }
            }
        }

        stage('Build Backend') {
            when {
                expression { return env.BUILD_BACKEND == 'true' || env.BUILD_BACKEND == 'false' }  // Always build if it's a first-time setup or changes detected
            }
            steps {
                dir('backend') {
                    powershell '''
                    # Check if the container is running, and stop/remove it if it exists
                    docker ps -q -f "name=spring-boot-app-01" | ForEach-Object { docker stop $_; docker rm $_ }

                    # Check if the 'latest' image exists. If not, build the image.
                    if (-not (docker images -q $Env:BACKEND_IMAGE)) {
                        Write-Host "Backend image not found, building..."
                        ./mvnw clean package
                        docker build -t $Env:BACKEND_IMAGE .
                    } else {
                        Write-Host "Backend image already exists, skipping build."
                    }
                    '''
                }
            }
        }

        stage('Build Frontend') {
            when {
                expression { return env.BUILD_FRONTEND == 'true' || env.BUILD_FRONTEND == 'false' }  // Always build if it's a first-time setup or changes detected
            }
            steps {
                dir('frontend') {
                    powershell '''
                    # Check if the container is running, and stop/remove it if it exists
                    docker ps -q -f "name=react-app-01" | ForEach-Object { docker stop $_; docker rm $_ }

                    # Check if the 'latest' image exists. If not, build the image.
                    if (-not (docker images -q $Env:FRONTEND_IMAGE)) {
                        Write-Host "Frontend image not found, building..."
                        npm install
                        npm run build
                        docker build -t $Env:FRONTEND_IMAGE .
                    } else {
                        Write-Host "Frontend image already exists, skipping build."
                    }
                    '''
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                withCredentials([string(credentialsId: 'WEATHER_API_KEY', variable: 'WEATHER_API_KEY')]) {
                    powershell '''
                    # Load environment variables from the .env file inside the devops folder
                    $env:EnvFile = ".env"
                    if (Test-Path $env:EnvFile) {
                        Get-Content $env:EnvFile | ForEach-Object {
                            $key, $value = $_ -split '='
                            [System.Environment]::SetEnvironmentVariable($key, $value, [System.EnvironmentVariableTarget]::Process)
                        }
                    }

                    # Shutdown any running Docker containers using the docker-compose.yml inside the devops folder
                    docker-compose down

                    # Run Docker Compose in detached mode with the environment variables set
                    docker-compose up -d --no-build --no-pull
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
