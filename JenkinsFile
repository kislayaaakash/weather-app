pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'kislaya-weather-app'
        BACKEND_IMAGE = "${DOCKER_REGISTRY}/backend:${env.BUILD_ID}"
        FRONTEND_IMAGE = "${DOCKER_REGISTRY}/frontend:${env.BUILD_ID}"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/dev']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/kislayaaakash/weather-app.git',
                            credentialsId: 'KISLAYAAAKASH'
                        ]],
                        poll: false
                    ])
                }
            }
        }

        stage('Check for Changes') {
            steps {
                script {
                    // Check if the .env file or backend/frontend source code has changed
                    def changes = sh(script: "git diff --name-only HEAD~1", returnStdout: true).trim()
                    env.BUILD_BACKEND = changes.contains('backend/') ? 'true' : 'false'
                    env.BUILD_FRONTEND = changes.contains('frontend/') ? 'true' : 'false'
                    env.UPDATE_ENV = changes.contains('.env') ? 'true' : 'false'
                }
            }
        }

        stage('Build Backend') {
            when {
                expression { env.BUILD_BACKEND == 'true' }
            }
            steps {
                dir('backend') {
                    powershell '''
                    ./mvnw clean package
                    docker build -t $Env:BACKEND_IMAGE .
                    '''
                }
            }
        }

        stage('Build Frontend') {
            when {
                expression { env.BUILD_FRONTEND == 'true' }
            }
            steps {
                dir('frontend') {
                    powershell '''
                    npm install
                    npm run build
                    docker build -t $Env:FRONTEND_IMAGE .
                    '''
                }
            }
        }

        stage('Deploy with Docker Compose') {
            when {
                expression { env.UPDATE_ENV == 'true' }
            }
            steps {
                withCredentials([string(credentialsId: 'WEATHER_API_KEY', variable: 'WEATHER_API_KEY')]) {
                    powershell '''
                    docker-compose down
                    docker-compose up -d
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
